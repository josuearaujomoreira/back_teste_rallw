generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id               String  @id @default(uuid())
  title            String
  details          String?
  slug             String  @unique
  maximumAttendees Int?    @map("maximum_attendees")
  local            String
  status           Boolean

  attendees    Attendee[]
  corporations Corporation[]

  @@map("events")
}

model Attendee {
  id            Int          @id @default(autoincrement())
  name          String
  email         String       @unique
  password      String
  phone         String
  age           Int
  sex           String
  shirtSize     String       @map("shirt_size")
  eventQuantity Int          @map("event_quantity")
  instrument    String?
  createdAt     DateTime     @default(now()) @map("created_at")
  type          TypeAttendee @default(ATTENDEE)

  corporationId Int         @map("corporation_id")
  corporation   Corporation @relation(fields: [corporationId], references: [id])
  eventId       String      @map("event_id")
  event         Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  checkIn       CheckIn?

  @@unique([eventId, email])
  @@map("attendees")
}

model Leader {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String
  accessStatus Boolean @default(false) @map("access_status")

  corporation Corporation?

  @@map("leaders")
}

model Corporation {
  id        Int    @id @default(autoincrement())
  name      String
  vacancies Int    @default(0)

  leader   Leader @relation(fields: [leaderId], references: [id])
  leaderId Int    @unique @map("leader_id")
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  String @map("event_id")

  attendee Attendee[]
  order    Order[]

  @@map("corporations")
}

model CheckIn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  ateendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId Int      @unique @map("attendee_id")

  @@map("check_in")
}

model Order {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @map("created_at")
  statusOrder   String    @default("progress") @map("status_order")
  paymentStatus String    @default("doesent pay") @map("payment_status")
  paymentDate   DateTime? @map("payment_date")
  paymentMethod String    @map("payment_method")
  urlQrCode     String?   @map("url_qr_code")
  amount        Float
  quantity      Int       @default(0)
  urlComprovant String?   @map("url_comprovant")

  products      Product[]
  corporation   Corporation @relation(fields: [corporationId], references: [id])
  corporationId Int         @map("corporation_id")

  @@map("orders")
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  price       Float
  quantity    Int

  order Order[]

  @@map("products")
}

enum TypeAttendee {
  ATTENDEE
  ESCORT
  DRIVER
}
